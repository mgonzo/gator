#!/usr/bin/python3

import sys
import argparse
import subprocess
import sqlite3
from datetime import datetime

from commands import *

parser = argparse.ArgumentParser()
parser.add_argument("command", help="the command to run")
parser.add_argument("--query", help="optional fetch query string")
parser.add_argument("--category", default='sss', help="optional fetch category to search")
parser.add_argument("--tag", help="optional tag for a report")
parser.add_argument("--list", help="list all reports", action='store_true')
args = parser.parse_args()

# Namespace(category='sss', command='fetch', query=None, tag=None)
# query must be present
# category must be present
def fetchParameters():
    if (args.query == None):
        print('fetch None? Ok. Done.')
        print('Next time provide a --query to fetch.\n')
        parser.print_help()
        sys.exit(2)

    return args.category, args.query

def fetchCommand(parameters, dbconn):
    dbcursor = dbconn.cursor()
    dbcursor.execute('''
        create table if not exists results 
            (date text, 
            query text, 
            category text, 
            city text, 
            url text, 
            price real, 
            title text, 
            link text)''')

    links = iter(fetch.getList(parameters[1], parameters[0]))
    datenow = '{0:%Y-%m-%d %H:%M:%S}'.format(datetime.today())
    parseLinks(links, datenow, dbconn, dbcursor)

def reportParameters():
    if (args.list):
        return ['list']
    return None

def reportCommand(parameters, dbconn):
    dbcursor = dbconn.cursor()
    if (parameters == None):
        print('no params')
        report.viewLast(dbcursor)
    elif (parameters[0] == 'list'):
        print(parameters[0])
        report.listReports(dbcursor)
    else:
        print(parameters[0])


allowedParameters = {}
allowedCommands = {}
allowedParameters['fetch'] = fetchParameters
allowedCommands['fetch'] = fetchCommand
allowedParameters['report'] = reportParameters
allowedCommands['report'] = reportCommand

def parseLinks(links, datenow, dbconn, dbcursor):
    try:
        link = next(links)
        print(link)
        html = fetch.fetchHtml(link)
        fetch.storeData(dbcursor, fetch.getDataFromHtml(html, link, datenow))
        dbconn.commit()
        parseLinks(links, datenow, dbconn, dbcursor)

    except StopIteration:
        return []

def getParameters(command):
    if (command not in allowedCommands):
        parser.print_help()
        sys.exit(2)

    if (command not in allowedParameters):
        parser.print_help()
        sys.exit(2)

    return allowedParameters[command]()

def runCommand(parameters):
    # open db connection
    dbfile = 'db/gator.db'
    dbconn = sqlite3.connect(dbfile)
    allowedCommands[args.command](parameters, dbconn)

    # close db connection and exit
    dbconn.close()
    sys.exit(0)

# kick it off ...
runCommand(getParameters(args.command))
